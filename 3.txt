# AI BOT & INTEGRATION SPECIALIST PROMPT - Member 3

## CRITICAL MISSION
You are a senior AI developer and system integration specialist. Create a complete bot system and deployment configuration that works perfectly on first try with ZERO debugging time. Generate complete, production-ready code.

## CRITICAL REQUIREMENTS
- Advanced Scrabble AI bot with strategic gameplay
- Complete deployment and integration setup
- Timer system coordination
- Performance monitoring and optimization
- Multi-stage bot difficulty (Stage 3: Basic, Stage 4: Advanced)

## EXACT BOT API INTEGRATION

### Bot Interface Contract:
```javascript
class ScrabbleBot {
  constructor(gameId, playerId, difficulty = 'advanced') {
    this.gameId = gameId;
    this.playerId = playerId;
    this.difficulty = difficulty;
    this.dictionary = new TrieDict(); // CSW24.txt loaded
    this.moveCalculator = new MoveCalculator();
  }
  
  // Called by server when it's bot's turn
  async generateMove(gameState, rack) {
    // Returns: 
    // { type: 'move', moves: [...], expectedScore: number }
    // { type: 'exchange', tiles: [...] }
    // { type: 'pass' }
  }
}
```

### Bot Integration with Server:
```javascript
// Server integration points
server.on('bot_turn', async (gameId, botId) => {
  const bot = getBotInstance(botId);
  const gameState = getGameState(gameId);
  const rack = gameState.playerRacks[botId];
  
  const decision = await bot.generateMove(gameState, rack);
  
  if (decision.type === 'move') {
    processMove(gameId, botId, decision.moves);
  } else if (decision.type === 'exchange') {
    processTileExchange(gameId, botId, decision.tiles);
  } else {
    processPassTurn(gameId, botId);
  }
});
```

## STAGE 3 BOT (Basic)
- Find any valid word from available tiles
- Simple scoring evaluation
- No strategic considerations
- 30-second move time limit
- Basic Trie traversal for word finding

## STAGE 4 BOT (Advanced)
Strategic AI with:

### 1. Move Generation Algorithm:
- DAWG/Trie-based word finding
- Cross-word validation
- Premium square optimization
- Hook word detection

### 2. Strategic Evaluation:
- Tile leave analysis (keep good tiles)
- Board control (block opponent opportunities)
- Endgame optimization
- Multi-turn lookahead (2-3 moves)

### 3. Advanced Heuristics:
- Vowel/consonant balance
- High-value tile management
- Rack turnover optimization
- Defensive positioning

## BOT ALGORITHM IMPLEMENTATION

```javascript
class AdvancedScrabbleBot {
  constructor() {
    this.dictionary = new TrieDict();
    this.moveGenerator = new MoveGenerator();
    this.evaluator = new PositionEvaluator();
  }
  
  async generateMove(gameState, rack) {
    const startTime = Date.now();
    
    // 1. Generate all possible moves
    const possibleMoves = this.generateAllMoves(gameState.board, rack);
    
    // 2. Evaluate each move strategically
    const evaluatedMoves = possibleMoves.map(move => ({
      ...move,
      score: this.evaluateMove(move, gameState, rack)
    }));
    
    // 3. Select best move considering strategy
    const bestMove = this.selectBestMove(evaluatedMoves, gameState);
    
    // 4. Consider exchange if no good moves
    if (bestMove.score < this.getExchangeThreshold(gameState)) {
      return this.considerExchange(rack, gameState);
    }
    
    return bestMove;
  }
  
  generateAllMoves(board, rack) {
    // Complex algorithm to find all valid moves
    // Using DAWG traversal and cross-word validation
  }
  
  evaluateMove(move, gameState, rack) {
    let score = move.baseScore;
    
    // Strategic adjustments
    score += this.evaluateRackLeave(rack, move.tilesUsed);
    score += this.evaluateBoardControl(move, gameState.board);
    score += this.evaluateDefensiveValue(move, gameState);
    score += this.evaluateEndgamePosition(move, gameState);
    
    return score;
  }
}
```

## TIMER SYSTEM INTEGRATION
```javascript
class TimerManager {
  constructor() {
    this.playerTimers = new Map();
    this.gameTimers = new Map();
  }
  
  startPlayerTimer(gameId, playerId) {
    const remaining = this.playerTimers.get(playerId) || 600000; // 10 minutes
    
    const timer = setInterval(() => {
      const newRemaining = remaining - 1000;
      this.playerTimers.set(playerId, newRemaining);
      
      // Broadcast timer update
      io.to(gameId).emit('message', {
        type: 'timer_update',
        data: { [playerId]: newRemaining }
      });
      
      // Auto-loss on timeout
      if (newRemaining <= 0) {
        this.handleTimeout(gameId, playerId);
      }
    }, 1000);
    
    this.gameTimers.set(`${gameId}-${playerId}`, timer);
  }
  
  pausePlayerTimer(gameId, playerId) {
    const timerId = `${gameId}-${playerId}`;
    const timer = this.gameTimers.get(timerId);
    if (timer) {
      clearInterval(timer);
      this.gameTimers.delete(timerId);
    }
  }
}
```

## COMPLETE DEPLOYMENT CONFIGURATION

### docker-compose.yml:
```yaml
version: '3.8'
services:
  scrabble-server:
    build: ./backend
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - REDIS_URL=redis://redis:6379
    depends_on:
      - redis
    
  scrabble-client:
    build: ./frontend
    ports:
      - "3000:80"
    environment:
      - REACT_APP_SERVER_URL=https://your-domain.com
    
  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
```

### Railway Configuration (railway.json):
```json
{
  "$schema": "https://railway.app/railway.schema.json",
  "build": {
    "builder": "NIXPACKS"
  },
  "deploy": {
    "startCommand": "npm start",
    "healthcheckPath": "/health",
    "healthcheckTimeout": 10,
    "restartPolicyType": "ON_FAILURE",
    "restartPolicyMaxRetries": 10
  }
}
```

### Vercel Configuration (vercel.json):
```json
{
  "version": 2,
  "builds": [
    {
      "src": "build/**",
      "use": "@vercel/static"
    }
  ],
  "routes": [
    {
      "src": "/(.*)",
      "dest": "/build/$1"
    }
  ]
}
```

## PERFORMANCE MONITORING
```javascript
class PerformanceMonitor {
  constructor() {
    this.metrics = {
      activeGames: 0,
      totalMoves: 0,
      averageResponseTime: 0,
      botMoveTime: 0
    };
  }
  
  trackBotMove(startTime, endTime) {
    const duration = endTime - startTime;
    this.metrics.botMoveTime = (this.metrics.botMoveTime + duration) / 2;
    
    if (duration > 30000) {
      console.warn(`Bot move took ${duration}ms - exceeds 30s limit`);
    }
  }
  
  healthCheck() {
    return {
      status: 'healthy',
      uptime: process.uptime(),
      memory: process.memoryUsage(),
      ...this.metrics
    };
  }
}
```

## INTEGRATION TEST SUITE
```javascript
class IntegrationTester {
  async runFullGameTest() {
    // 1. Test lobby system
    await this.testLobbyJoin();
    
    // 2. Test human vs human game
    await this.testHumanGame();
    
    // 3. Test human vs bot game
    await this.testBotGame();
    
    // 4. Test timer system
    await this.testTimerSystem();
    
    // 5. Test deployment health
    await this.testDeploymentHealth();
    
    console.log('âœ… All integration tests passed');
  }
  
  async testLobbyJoin() {
    // Test lobby functionality
  }
  
  async testHumanGame() {
    // Test human vs human gameplay
  }
  
  async testBotGame() {
    // Test bot integration and moves
  }
  
  async testTimerSystem() {
    // Test timer synchronization
  }
  
  async testDeploymentHealth() {
    // Test production deployment
  }
}
```

## DICTIONARY AND TRIE IMPLEMENTATION
```javascript
class TrieNode {
  constructor() {
    this.children = {};
    this.isEndOfWord = false;
  }
}

class TrieDict {
  constructor() {
    this.root = new TrieNode();
  }
  
  loadDictionary(wordsArray) {
    // Load CSW24.txt words into Trie
  }
  
  isValidWord(word) {
    // O(1) word validation
  }
  
  findWords(letters, board, position) {
    // Find all possible words from given letters
  }
}
```

## DELIVERABLES REQUIRED
Generate complete production-ready code including:
- bot-ai.js (advanced bot implementation)
- timer-manager.js (timer system)
- deployment/ (Docker, Railway, Vercel configs)
- integration-tests.js (test suite)
- performance-monitor.js (monitoring system)
- dictionary-trie.js (Trie implementation)
- deploy.sh (deployment script)
- README.md (deployment instructions)
- docker-compose.yml
- All configuration files

**CRITICAL**: Generate complete bot implementation with advanced algorithms, full deployment configuration for Railway/Vercel, integration test suite, performance monitoring, and production-ready error handling. Include detailed README.md with deployment instructions. The entire system must work perfectly without any debugging or modifications.
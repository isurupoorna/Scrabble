version: '3.8'

services:
  # Scrabble Game Server
  scrabble-server:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: scrabble-server
    ports:
      - "${SERVER_PORT:-3001}:3001"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET:-your-jwt-secret}
      - CORS_ORIGIN=${CORS_ORIGIN:-http://localhost:3000}
      - BOT_DIFFICULTY=${BOT_DIFFICULTY:-advanced}
      - MAX_CONCURRENT_GAMES=${MAX_CONCURRENT_GAMES:-100}
      - DICTIONARY_FILE=/app/CSW24.txt
    volumes:
      - ./CSW24.txt:/app/CSW24.txt:ro
      - server_logs:/app/logs
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    networks:
      - scrabble-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Scrabble Game Client
  scrabble-client:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    container_name: scrabble-client
    ports:
      - "${CLIENT_PORT:-3000}:80"
    environment:
      - REACT_APP_SERVER_URL=${REACT_APP_SERVER_URL:-http://localhost:3001}
      - REACT_APP_WS_URL=${REACT_APP_WS_URL:-ws://localhost:3001}
      - REACT_APP_ENV=${NODE_ENV:-production}
      - REACT_APP_VERSION=${VERSION:-1.0.0}
    depends_on:
      - scrabble-server
    restart: unless-stopped
    networks:
      - scrabble-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'

  # Redis for session storage and caching
  redis:
    image: redis:7-alpine
    container_name: scrabble-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - scrabble-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # PostgreSQL for persistent data
  postgres:
    image: postgres:15-alpine
    container_name: scrabble-postgres
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-scrabble}
      - POSTGRES_USER=${POSTGRES_USER:-scrabble_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-secure_password}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d:ro
    restart: unless-stopped
    networks:
      - scrabble-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Nginx reverse proxy and load balancer
  nginx:
    image: nginx:alpine
    container_name: scrabble-nginx
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - scrabble-server
      - scrabble-client
    restart: unless-stopped
    networks:
      - scrabble-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'

  # Monitoring and metrics (Prometheus)
  prometheus:
    image: prom/prometheus:latest
    container_name: scrabble-prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    restart: unless-stopped
    networks:
      - scrabble-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: scrabble-grafana
    ports:
      - "${GRAFANA_PORT:-3030}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - scrabble-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

# Networks
networks:
  scrabble-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

# Volumes for persistent data
volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  server_logs:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Production overrides
# Use with: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up